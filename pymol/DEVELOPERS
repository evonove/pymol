
PyMOL Developer Notice
======================

There are three ways in which software developers can contribute to
the PyMOL Molecular Graphics Project.

(1) Work on the main source tree.  As a matter of simple practicality,
you must transfer copyright of such improvements to DeLano Scientific
and attach no conditions to your work beyond those specified in the
PyMOL LICENSE file.  Essentially you are giving everyone the right to
use your code for all purposes without restriction.  This is core to
the PyMOL open-source philosophy, and no exceptions will be made.

(2) Develop self-contained functionality that can be integrated into
PyMOL as part of the "contrib" directory.  With this approach, you
retain copyright to your code, but you must still place your source
under the "Python" license or an equivalent.  Again, you are giving
everyone the right to use your code for all purposes without
restriction, and there will be no exceptions.

(3) Develop independent functionality which makes use of the PyMOL
Python API.  With this approach, your project need not become part of
the PyMOL distribution, and you can attach whatever restrictions you
would like to usage and distribution of your code.  Of course, you
must therefore also assume the responsibility for distributing your
software.  If you want your code to become part of the official PyMOL
package, then you will need to release it under the "Python" license
or an equivalent.

These are draft rules, and I would appreciate feedback and comments
(email to warren@delanoscientific.com).  However, I am absolutely
opposed to restricting PyMOL to the GNU Public License (GPL), so don't
even ask.  Contrary to Richard Stallman and others at the Free
Software Foundation (http://www.fsf.org), I believe that the
open-source movement will benefit from source code with fewer
restrictions, not more.  PyMOL, like Python, is truly free and
open-source.

Given PyMOL's unrestricted status, it is true that any person or any
company could fork the source tree, add their own enhancements, and
then try to market a PyMOL derivative as a commercial product or as
part of a larger product.  There are a number of reasons why I believe
that this is not likely to be a major problem:

(1) PyMOL development continues at a steady pace.  If someone forks
the source tree, then they will always be behind in terms of features
and have to struggle to maintain compatability with the current open
source version.  The best way to guarantee compatibility of
modifications with the free version is to donate code into it!

(2) Commercial success will be difficult to achieve when your primary
competition is a free product.  Any worthwhile enhancement found in a
commercial version is bound to be reproduced in the free version in
short order.  There are plenty of talented open-source programmers out
there who would love to eliminate any competitive advantage that a
commercial version might try to achieve simply by adding a few bells
and whistles to open source code.

(3) Interfaces between PyMOL and other third-party software programs
(such as MMTK) will be based on the current free version of the code.
Here again, maintenance of a proprietary forked version in a state of
compatability could become quite a chore.

(4) The main users and developers of PyMOL are scientists whose
primary goal is advancing scientific research, not commercial software
development.  They understand that scientific progress is in large
part determined by the quality of the available tools and technology,
and they aim towards increased availability of excellent tools in
order to accelerate scientific progress in all contexts, both
commercial and academic.

In the past, scientific software developers have made the mistake of
"selling-out" to commercial software resellers and later regretted
this decision because the commercial agreements permanently restricted
what they could do with their own code.  Today's developers know
better.  By releasing their code as open source under a
non-restrictive "Python" style license, they are assured that the code
will be available to both themselves and all other researchers in the
field into perpetuity for purposes of tackling new scientific
challenges.

However, there are certain cases where PyMOL would be expected to see
widespread commercial use.  Systems which are built around the PyMOL
API but do not require or involve significant modifications to the
PyMOL core could be quite powerful.  An in-house commercial
application built with the PyMOL toolkit could both take advantange of
PyMOL's strengths and provide the company with assurance that they
will always be able to use that version of PyMOL without paying any
licensing fees.  However, when a company makes direct enhancements to
PyMOL which facilitate such an in-house system, there is an incentive
to donate those changes to the PyMOL project in order to insure future
compatability.

Another commercial application might involve incorporation of PyMOL
into a product which adds value and function far beyond that of PyMOL
alone.  For example, a commercial package which performs sophisticated
molecular dynamics and energy minimization might use PyMOL for
visualization without making any modifications to the PyMOL code base.
Here, the commercial developer has a built-in incentive to enhance,
support, and maintain compatability with the free version of the
source code, and the market value of their product will mainly reflect
the functionality that extends beyond PyMOL.

Of course, development of free and open-source systems built using
PyMOL will be even more exciting, but these kinds of commercial uses
of PyMOL can only help to further advance the PyMOL project and should
therefore be encouraged.

It is my hope to eventually see a completely free and open-source
molecular modeling environment based on an interoperative language
like Python and constructed from components like PyMOL.  This
environment should be loaded with so much functionality that it
surpasses everything else and becomes the de facto standard for
computational modeling.

Such an environment would enable computational chemists and biologists
to focus more on the science and less on software licensing and
redundant tool development.  With increasing availability of free
tools such as Linux, the GNU suite, CACTVS, MMTK, NAMD, VMD, Mesa,
Python, and PyMOL, we are rapidly moving in that direction.

Warren L. DeLano
warren@delanoscientific.com



